#!/usr/bin/python3

import os
import sys

import static

import lexer
import translator
import pre

def get_free_nasmfile_name() -> str:
    """Get a free file name in the current directory."""
    i = 0
    while os.path.exists(f"out_{i}.s"):
        i += 1
    return f"out_{i}.s"

def get_free_object_name() -> str:
    """Get a free object file name in the current directory."""
    i = 0
    while os.path.exists(f"out_{i}.o"):
        i += 1
    return f"out_{i}.o"

def error(msg: str, fatal=True) -> None:
    print(f"{ {True: "ERROR", False: "WARNING"}[fatal]}: {msg}")

with open("./help.txt")    as f: HELP    = f.read()
with open("./version.txt") as f: VERSION = f.read()

def assemble(in_: str, out: str) -> None: os.system(f"nasm {in_} -o {out}")
def     link(in_: str, out: str) -> None:   os.system(f"ld {in_} -o {out}")

argc: int = len(sys.argv)

if argc == 1:
    error("no arguments specified. help:\n")
    print(HELP)
    sys.exit(static.EXIT_CODES["no arguments specified"])

i = 1

out_mode = "default"

in_ = None
out = None

timestamp = False

def isvalidyn(s):
    if len(s) == 0:
        return False
    elif not s.lower()[0] in ('y', 'n'):
        return False
    else:
        return s.lower()[0]

forcecompiled = False

while i < argc:
    if sys.argv[i].startswith('-'):
        # Options
        if sys.argv[i] in ("-h", "--help"):
            print(HELP)
            sys.exit(0)
        elif sys.argv[i] in ("-v", "--version"):
            print(VERSION)
            sys.exit(0)
        elif sys.argv[i] in ("-o", "--output"):
            if i == argc - 1:
                error("no output file specified. Usage:")
                print(HELP)
                sys.exit(static.EXIT_CODES["no output file specified"])
            out = sys.argv[i + 1]
            if os.path.exists(sys.argv[i + 1]):
                error(f"output file {out} already exists. Do you want to overwrite it?", False)
                ans = str()
                while not isvalidyn(ans):
                    ans = input("(Y/n)>> ")
                if ans == 'y':
                    print(f"overwriting 'out' param to '{out}'")
                else:
                    error("output file already exists")
                    sys.exit(static.EXIT_CODES["output file already exists"])
            i += 1
        elif sys.argv[i] in ("-b", "--object"):
            out_mode = "object"
        elif sys.argv[i] in ("-s", "--asm"):
            out_mode = "asm"
        elif sys.argv[i] in ("-t", "--timestamp"):
            timestamp = True
        else:
            error("invalid option.")
            print(HELP)
            sys.exit(static.EXIT_CODES["invalid option"])
    elif i == 1:
        in_ = sys.argv[i]
        if not os.path.exists(sys.argv[i]):
            error(f"input file {in_} does not exist. Do you want to force-compile it?", False)
            ans = str()
            while not isvalidyn(ans):
                ans = input("(Y/n)>> ")
            if ans == 'y':
                print(f"forcing 'in_' param to '{in_}'")
                forcecompiled = True
            else:
                error(f"input file {in_} does not exist")
                sys.exit(static.EXIT_CODES["input file does not exist"])
    else:
        error("invalid argument.")
        print(HELP)
        sys.exit(static.EXIT_CODES["invalid argument"])
    i += 1

if in_ == None:
    error("no input file specified. Usage:")
    print(HELP)
    sys.exit(static.EXIT_CODES["no input file specified"])

if out == None:
    if in_.endswith(".sbb"):
        out = in_[:-4]
    else:
        out = os.path.splitext(in_)[0]
    
    out += {"asm": ".s", "object": ".o", "default": ""}[out_mode]

errorcount = 0 # TODO: use this var

with open(in_, "r") as f: source_code = f.read()
source_code = pre.remove_comments(source_code)
tokenized = lexer.tokenize(source_code)

ASSEMBLY_NAME = {True: out, False: get_free_nasmfile_name()}[out_mode == "asm"]
OBJECT_NAME = {True: out, False: get_free_object_name()}[out_mode == "object"]

with open(ASSEMBLY_NAME, 'w') as f: f.write(translator.translate(tokenized, timestamp))

if out_mode == "asm":
    print(f"Successfully { {True: "force-", False: ""}[forcecompiled]}compiled file {in_} to NASM x86_64bit Assembly with {errorcount} errors.")
    sys.exit(0)
elif out_mode == "object":
    os.system(f"nasm -f elf64 {ASSEMBLY_NAME} -o {out}")
    os.system(f"rm {ASSEMBLY_NAME}")
    print(f"Successfully { {True: "force-", False: ""}[forcecompiled]}compiled and linked file {in_} to an unlinked object file with {errorcount} errors.")
    sys.exit(0)
elif out_mode == "default":
    os.system(f"nasm -f elf64 {ASSEMBLY_NAME} -o {OBJECT_NAME}")
    os.system(f"ld {OBJECT_NAME} -o {out}")
    os.system(f"rm {ASSEMBLY_NAME} {OBJECT_NAME}")
    print(f"Successfully { {True: "force-", False: ""}[forcecompiled]}compiled and linked file {in_} to an executable with {errorcount} errors.")
    sys.exit(0)
else:
    error(f"invalid output mode: {out_mode}. this should never happen. please report this to https://github.com/Pauytramosio/compiler")